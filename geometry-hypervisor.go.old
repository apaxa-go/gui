package gui

import "github.com/apaxa-go/helper/mathh"

type GeometryHypervisorI interface {
	TextLineGeometry(text string, fontHeight float64) (size PointF)
	Scale() Scale
	pause()
	resume()
	runIfActive()
}

type GeometryHypervisor struct {
	pause  int
	window *Window
}

func (h *GeometryHypervisor) Pause() { h.pause++ }
func (h *GeometryHypervisor) Resume() {
	h.pause = mathh.Max2Int(0, h.pause-1)
	h.runIfActive()
}
func (h *GeometryHypervisor) IsActive() bool { return h.pause == 0 }

func (h *GeometryHypervisor) runIfActive() {
	if h.IsActive() {
		h.do()
	}
}

func (h *GeometryHypervisor) do() {
	h.doUPHG(h.window)
	h.doUCHG(h.window)
	h.doUPVG(h.window)
	h.doUCVG(h.window)
	h.window.adjustSize()
	h.doIR(h.window)
	h.window.invalidateRegions()
}

//
// Update Possible Horizontal Geometry (from down to up).
//

func (h *GeometryHypervisor) doUPHG(control Control) {
	if control.getCUPHG() && (!control.getUPHG() || !control.getUPHGRecursive()) {
		for _, child := range control.Children() {
			h.doUPHG(child)
		}
	}
	if control.getUPHG() {
		var changed bool
		if control.getUPHGRecursive() {
			changed = h.doUPHGRecursive(control)
		} else {
			changed = control.setPossibleHorGeometry(control.ComputePossibleHorGeometry())
		}
		if changed && control.Parent() != nil {
			control.Parent().setUPHG(false)
			control.Parent().setUCHG()
		}
	}
	control.unsetCUPHG()
	control.unsetUPHG()
}

func (h *GeometryHypervisor) doUPHGRecursive(control Control) (changed bool) {
	for _, child := range control.Children() {
		h.doUPHGRecursive(child)
	}
	changed = control.setPossibleHorGeometry(control.ComputePossibleHorGeometry())
	if changed && control.Parent() != nil {
		control.Parent().setUCHG()
	}
	control.unsetCUPHG()
	control.unsetUPHG()
	return
}

//
// Update Child Horizontal Geometry (from up to down).
//

func (h *GeometryHypervisor) doUCHG(control Control) {
	if control.getUCHG() {
		children := control.Children()
		lefts, rights := control.ComputeChildHorGeometry()
		for i, child := range children {
			changed := child.setHorGeometry(lefts[i], rights[i])
			if changed {
				child.setUCHG()
				child.setUPVG(false)
				child.setIR()
			}
		}
		control.unsetUCHG()
	}
	if control.getCUCHG() {
		children := control.Children()
		for _, child := range children {
			h.doUCHG(child)
		}
		control.unsetCUCHG()
	}
}

//
// Update Possible Vertical Geometry (from down to up).
//

func (h *GeometryHypervisor) doUPVG(control Control) {
	if control.getCUPVG() && (!control.getUPVG() || !control.getUPVGRecursive()) {
		for _, child := range control.Children() {
			h.doUPVG(child)
		}
	}
	if control.getUPVG() {
		var changed bool
		if control.getUPVGRecursive() {
			changed = h.doUPVGRecursive(control)
		} else {
			changed = control.setPossibleVerGeometry(control.ComputePossibleVerGeometry())
		}
		if changed && control.Parent() != nil {
			control.Parent().setUPVG(false)
			control.Parent().setUCVG()
		}
	}
	control.unsetCUPVG()
	control.unsetUPVG()
}

func (h *GeometryHypervisor) doUPVGRecursive(control Control) (changed bool) {
	for _, child := range control.Children() {
		h.doUPVGRecursive(child)
	}
	changed = control.setPossibleVerGeometry(control.ComputePossibleVerGeometry())
	if changed && control.Parent() != nil {
		control.Parent().setUCVG()
	}
	control.unsetCUPVG()
	control.unsetUPVG()
	return
}

//
// Update Child Vertical Geometry (from up to down).
//

func (h *GeometryHypervisor) doUCVG(control Control) {
	if control.getUCVG() {
		children := control.Children()
		tops, bottoms := control.ComputeChildHorGeometry()
		for i, child := range children {
			changed := child.setVerGeometry(tops[i], bottoms[i])
			if changed {
				child.setUCVG()
				child.setIR()
			}
		}
		control.unsetUCVG()
	}
	if control.getCUCVG() {
		children := control.Children()
		for _, child := range children {
			h.doUCVG(child)
		}
		control.unsetCUCVG()
	}
}

//
// Invalidate Region (from up to down).
//

func (h *GeometryHypervisor) doIR(control Control) {
	if control.getIR() {
		h.window.addInvalidRegion(control.Geometry())
		control.unsetIR()
		if control.getCIR() {
			h.doIRUnsetRecursive(control)
		}
	} else if control.getCIR() {
		children := control.Children()
		for _, child := range children {
			h.doIR(child)
		}
		control.unsetCIR()
	}
}

func (h *GeometryHypervisor) doIRUnsetRecursive(control Control) {
	if control.getCIR() {
		children := control.Children()
		for _, child := range children {
			h.doIRUnsetRecursive(child)
		}
		control.unsetCIR()
	}
	control.unsetIR()
}
